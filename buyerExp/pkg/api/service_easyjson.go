// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi(in *jlexer.Lexer, out *SubscribeResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.Id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi(out *jwriter.Writer, in SubscribeResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscribeResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscribeResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscribeResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscribeResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi(l, v)
}
func easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi1(in *jlexer.Lexer, out *SubscribeReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.NoticeURL = string(in.String())
		case "mail":
			out.Mail = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi1(out *jwriter.Writer, in SubscribeReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.NoticeURL))
	}
	{
		const prefix string = ",\"mail\":"
		out.RawString(prefix)
		out.String(string(in.Mail))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscribeReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscribeReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscribeReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscribeReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi1(l, v)
}
func easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi2(in *jlexer.Lexer, out *ConfirmResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi2(out *jwriter.Writer, in ConfirmResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfirmResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfirmResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfirmResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfirmResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi2(l, v)
}
func easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi3(in *jlexer.Lexer, out *ConfirmReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hash":
			out.Hash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi3(out *jwriter.Writer, in ConfirmReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfirmReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfirmReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd93bc43EncodeGithubComFedorkolmykowAvitoexpPkgApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfirmReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfirmReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd93bc43DecodeGithubComFedorkolmykowAvitoexpPkgApi3(l, v)
}
